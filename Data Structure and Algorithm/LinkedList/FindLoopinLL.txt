/*Java program to check if linked list contains loop or cycle, which
 *  is exact implementation of above algorithm. This algorithm is also known as Floyd’s cycle finding
 *   algorithm and popularly known as tortoise and
 *  hare algorithm to find cycles in linked list.
*/
package linkedList;

public class FindLoop {
	Node head;
	class Node{
		int data;
		Node next;
		public Node(int d){
			data=d;
			next=null;
		}
	}
	public void push(int item){
		Node n=new Node(item);
		n.data=item;
		n.next=head;
	   head=n;
	}
	public void printlist(){
		Node current=head;
		while(current!=null){
			System.out.print(current.data+"->");
			current=current.next;
		}
		System.out.print("Null");
	}
	
	public void loopdetect(){
		Node slow=head;
		Node fast=head;
		if(head!=null){
			while(slow!=null&&fast!=null&&fast.next!=null){
				fast=fast.next.next;
				slow=slow.next;
				if(fast==slow){
					System.out.println("yes,loop is there");
					break;
				}
			}
		}
	}
	 public static void main(String[] args) 
	    { 
	        FindLoop list = new FindLoop(); 
	        list.head = list.new Node(50); 
	        list.head.next = list.new Node(20); 
	        list.head.next.next = list.new Node(15); 
	        list.head.next.next.next = list.new Node(4); 
	        list.head.next.next.next.next = list.new Node(10); 
	  
	        // Creating a loop for testing 
	        list.head.next.next.next.next.next = list.head.next.next; 
	        //list.printlist();
	        list.loopdetect(); 
	    } 
}

